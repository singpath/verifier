#!/usr/bin/env node
/*eslint no-console: 0*/
'use strict';

const argparse = require('argparse');
const camelCase = require('lodash.camelcase');
const deepDiff = require('deep-diff');
const Firebase = require('firebase');
const FirebaseTokenGenerator = require('firebase-token-generator');
const path = require('path');
const prompt = require('prompt');
const childProcess = require('child_process');
const url = require('url');
const yaml = require('js-yaml');

const fs = require('../src/promiseFs');
const packageJson = require('../package.json');
const verifier = require('../');
const benchmark = require('../src/benchmark');

const ERROR_NO_ENDPOINT = 'A queue path is required.';
const ERROR_NO_SECRET = 'A firebase auth secret is required.';
const ERROR_INVALID_QUEUE_PATH = 'Invalid queue path.';

const HINT_AUTH_SECRET = 'A Firebase auth secret can be found at https://%s.firebaseio.com/?page=Admin';

const DEFAULT_SETTINGS = {
  firebaseQueue: 'https://singpath-play.firebaseio.com/singpath/queues/default',
  maxWorker: 10,
  imageTag: 'latest',
  payloadCount: 20
};

const EPILOG = `Environment variables:
  SINGPATH_FIREBASE_SECRET  Firebase auth secret.
  SINGPATH_FIREBASE_QUEUE   Path to the firebase queue.
  SINGPATH_MAX_WORKER       Concurrent verification limit.
  SINGPATH_IMAGE_TAG        Verifier image tag.
  DOCKER_HOST               Docker daemon socket to connect to.
  DOCKER_TLS_VERIFY         Use TLS with the Docker daemon.
  DOCKER_CERT_PATH          Location of your docker-machine authentication keys.

Config:
  You can set the default values with a JSON file named '.singpathrc' in your
  working directory.

  Example:

    {
      "firebaseQueue": "https://my-db.firebaseio.com/singpath/queues/default",
      "firebaseSecret": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    }

`;


const CMDS = [{
  name: 'run',
  description: 'Start the verifier daemon',

  options(parser, defaults) {
    commonOptions(parser, defaults);

    parser.addArgument(['-c', '--max-worker'], {
      help: 'Concurrent verification limit\n(default: %(defaultValue)s)',
      type: 'int',
      defaultValue: defaults.maxWorker
    });
  },

  cmd(opts, logger) {
    return requireSecret(opts, logger).then(
      () => singpathQueue(opts, logger)
    ).then(q => {
      const generator = new FirebaseTokenGenerator(opts.firebaseSecret);
      const auth = verifier.auth(generator, opts.debug);
      let cancel;

      logger.info('Starting watching queue...');

      q.on('watchStopped', err => {
        if (err) {
          logger.info('Restarting watching queue after error: %s', err.toString());
          watch(q, auth, logger).then(c => cancel = c);
          return;
        }

        logger.info('Watch on "%s" stopped', opts.firebaseQueue);
        process.exit(0);
      });

      watch(q, auth, logger).then(c => {
        cancel = c;
        process.on('SIGTERM', () => cancel());
        process.on('SIGINT', () => cancel());
      });

      // We will manage the exit
      return new Promise(() => undefined);
    });
  }
}, {
  name: 'push',
  description: 'Push a task to the Firebase queue',

  options(parser, defaults) {
    commonOptions(parser, defaults);

    parser.addArgument(['payload'], {
      help: (
        'JSON or YAML payload to push; \n' +
        'must include `language`, `tests` and `solution`'
      )
    });
  },

  cmd(opts, logger) {
    logger.info('parsing yaml encoded solutions');
    const solutions = loadSolutions(opts.payload, {logger});

    if (solutions.length < 0) {
      logger.error('no solution to push');
      process.exit(131);
    }

    return requireSecret(opts, logger).then(
      () => singpathQueue(opts, logger)
    ).then(q => {
      const generator = new FirebaseTokenGenerator(opts.firebaseSecret);
      const auth = verifier.auth(generator, opts.debug);
      const authToken = auth.user();

      return q.auth(authToken).then(() => {
        return pushSolutions(q, solutions, logger);
      }).then(
        failures => process.exit(failures)
      );
    });
  }
}, {
  name: 'settings',
  description: 'Print settings',

  options(parser, defaults) {
    commonOptions(parser, defaults);
  },

  cmd(opts) {
    delete opts.func;

    return Promise.resolve(opts.promptSecret).then(doPrompt => {
      delete opts.promptSecret;

      if (!doPrompt || !process.stdout.isTTY) {
        return opts.firebaseSecret;
      }

      return promptSecret(opts.firebaseQueue);
    }).then(
      secret => opts.firebaseSecret = secret
    ).then(
      () => console.log(JSON.stringify(opts, null, 4))
    );
  }
}, {
  name: 'build-verifiers',
  description: 'Build verifier images',

  options() {},

  cmd(opts, logger) {
    return Object.keys(verifier.images).reduce((chain, language) => {
      const image = verifier.images[language];

      return chain.then(() => {
        logger.info('building image "%s"...', image.name);
        return buildImage(image, opts.imageTag, logger);
      });
    }, Promise.resolve());
  }
}, {
  name: 'pull-verifiers',
  description: 'Pull verifier images',

  options() {},

  cmd(opts, logger) {
    return Object.keys(verifier.images).reduce((chain, language) => {
      const image = verifier.images[language];

      return chain.then(() => {
        logger.info('pulling image "%s"...', image.name);
        return pullImage(image, opts.imageTag, logger);
      });
    }, Promise.resolve());
  }
}, {
  name: 'test',
  description: 'Test verifier images against a yaml encoded array of solution',

  options(parser) {
    parser.addArgument(['payload'], {
      help: (
        'YAML encoded payload; \n' +
        'each solution must include `language`, `tests`, `solution` and `expected`; \n' +
        '`expected` must match the result of the verifier.'
      )
    });
  },

  cmd(opts, logger) {
    const solutions = loadSolutions(opts.payload, {logger});

    if (solutions.length < 0) {
      logger.error('no solution to test.');
      process.exit(132);
    }

    verifier.dockerClient(opts).then(client => {
      return testSolutions(client, solutions, opts.imageTag, logger);
    }).then(
      () => logger.info('Tests run successfully.')
    ).catch(err => {
      logger.error('%s', err.toString());
      process.exit(133);
    });
  }
}, {
  name: 'benchmark',
  description: 'Fill a queue with tasks and caculate duration to run them',

  options(parser, defaults) {
    commonOptions(parser, defaults);

    parser.addArgument(['-c', '--payload-count'], {
      help: 'Number of tasks to create\n(default: %(defaultValue)s)',
      type: 'int',
      defaultValue: defaults.payloadCount
    });

    parser.addArgument(['--payload'], {
      help: (
        'YAML encoded payload; \n' +
        'each solution must include `language`, `tests`, `solution` and `expected`; \n' +
        '`expected` must match the result of the verifier.'
      )
    });

  },

  cmd(opts, logger) {
    const payloads = opts.payload && loadSolutions(opts.payload, {logger});
    const length = opts.payloadCount;
    const queueId = queueName(opts.firebaseQueue);
    const firebase = verifier.firebase.factory(firebaseId(opts.firebaseQueue));
    const singpath = verifier.singpath.create(firebase);

    return requireSecret(opts, logger).then(() => {
      const generator = new FirebaseTokenGenerator(opts.firebaseSecret);
      const auth = verifier.auth(generator, opts.debug);

      return singpath.auth.login(auth.user('benchmark'));
    }).then(
      () => singpath.auth.status().filter(auth => !!auth).take(1).toPromise().then(
        auth => logger.debug('auth: %j', auth)
      )
    ).then(
      () => benchmark.run(singpath, {payloads, length, queueId, logger})
    );
  }
}];


if (require.main === module) {
  main();
}


function main() {
  envSettings(DEFAULT_SETTINGS).then(
    settings => fileSettings('./.singpathrc', settings)
  ).then(
    settings => parseArgs(settings)
  ).then(opts => {
    let level = verifier.logger.INFO;

    if (opts.debug) {
      level = verifier.logger.DEBUG;
    } else if (opts.quiet) {
      level = verifier.logger.ERROR;
    }

    return opts.func(opts, verifier.logger({level}));
  }).then(
    () => process.exit(0),
    err => {
      console.error('Unexpected error: %s\n\n%s', err, err.stack);
      process.exit(1);
    }
  );
}

function parseArgs(defaults, args) {
  const parser = new argparse.ArgumentParser({
    version: packageJson.version,
    addHelp: true,
    description: 'Push message',
    formatterClass: argparse.RawTextHelpFormatter,
    epilog: EPILOG
  });

  parser.addArgument(['-d', '--debug' ], {
    action: 'storeTrue',
    help: 'print debug messages'
  });

  parser.addArgument(['-s', '--silent' ], {
    action: 'storeTrue',
    help: 'print only error messages'
  });

  parser.addArgument(['--image-tag'], {
    help: 'Verifier image tag\n(default: %(defaultValue)s)',
    metavar: 'TAG',
    defaultValue: defaults.imageTag
  });

  const subparsers = parser.addSubparsers();

  CMDS.forEach(sub => {
    const parser = subparsers.addParser(sub.name, {
      addHelp: true,
      description: sub.description,
      formatterClass: argparse.RawTextHelpFormatter,
      epilog: EPILOG
    });

    sub.options(parser, defaults);
    parser.setDefaults({func: (opts, logger) => sub.cmd(opts, logger)});
  });

  return Object.assign(
    {},
    defaults,
    camelCaseObject(parser.parseArgs(args))
  );
}

function commonOptions(parser, defaults) {
  parser.addArgument(['-e', '--firebase-queue' ], {
    help: 'Path to the firebase queue\n(default: %(defaultValue)s)',
    defaultValue: defaults.firebaseQueue
  });

  parser.addArgument(['-p', '--prompt-secret'], {
    help: 'Prompt for the Firebase secret',
    action: 'storeTrue',
    defaultValue: defaults.promptSecret
  });
}

function fileSettings(settingPath, defaults) {
  defaults = defaults || {};

  return fs.readFile(settingPath).then(
    config => JSON.parse(config)
  ).catch(
    () => {
      return {};
    }
  ).then(
    config => Object.assign({}, defaults, config)
  );
}

function envSettings(defaults) {
  const prefix = 'SINGPATH_';

  return Promise.resolve(Object.keys(process.env).filter(
    key => key.startsWith(prefix)
  ).reduce((settings, envKey) => {
    const key = camelCase(envKey.slice(prefix.length).toLowerCase());
    settings[key] = process.env[envKey];
    return settings;
  }, defaults));
}

function camelCaseObject(obj) {
  return Object.keys(obj).reduce((copy, key) => {
    copy[camelCase(key)] = obj[key];
    return copy;
  }, {});
}

function singpathQueue(opts, logger) {
  const fbClient = new Firebase(opts.firebaseQueue);
  const imageTag = opts.imageTag;
  const maxWorker = opts.maxWorker;

  return verifier.dockerClient(opts).then(
    client => verifier.singpathQueue(
      fbClient, client, {logger, imageTag, maxWorker}
    )
  );
}

function requireSecret(opts, logger) {
  return Promise.resolve(opts.promptSecret).then(doPrompt => {
    if (!doPrompt || !process.stdout.isTTY) {
      return opts.firebaseSecret;
    }

    return promptSecret(opts.firebaseQueue);
  }).then(secret => {
    if (!secret) {
      logger.error(ERROR_NO_SECRET);
      process.exit(130);
    }

    opts.firebaseSecret = secret;
    return opts;
  });
}

function promptSecret(firebaseQueue) {

  console.info(HINT_AUTH_SECRET, firebaseId(firebaseQueue));

  return new Promise((resolve, reject) => {
    const schema = {
      properties: {
        secret: {
          description: 'Firebase auth secret',
          message: ERROR_NO_SECRET,
          hidden: true,
          required: true
        }
      }
    };

    prompt.start({colors: false});
    prompt.get(schema, (err, results) => {
      if (err) {
        reject(err);
      } else {
        resolve(results.firebaseSecret);
      }
    });
  });
}

function firebaseId(firebaseQueue) {
  if (!firebaseQueue) {
    throw new Error(ERROR_NO_ENDPOINT);
  }

  let parsedUrl;

  try {
    parsedUrl = url.parse(firebaseQueue);
  } catch (e) {
    throw new Error(ERROR_INVALID_QUEUE_PATH);
  }

  return parsedUrl.hostname.split('.', 1).pop();
}

function queueName(firebaseQueue) {
  if (!firebaseQueue) {
    throw new Error(ERROR_NO_ENDPOINT);
  }

  return firebaseQueue.split('/').pop();
}

function watch(q, auth, logger) {
  logger.info('Generating auth token...');
  const token = auth.worker(q.queueName);

  logger.info('Authenticating client...');
  return q.auth(token).then(
    () => q.reset()
  ).then(
    () => q.watch()
  ).catch(err => {
    logger.error(err);
    process.exit(130);
  });
}

function loadSolutions(yamlString, options) {
  let docs = [];
  const logger = options.logger || console;

  logger.info('Parsing solutions to push...');
  logger.debug(yamlString);
  yaml.safeLoadAll(yamlString, doc => {
    const language = doc.language;
    const tests = doc.tests;
    const solution = doc.solution;
    const expected = doc.expected || null;

    if (!language || !tests || !solution) {
      logger.error(
        'The verifier requires a language, some tests and a solution. Got: %j',
        doc
      );
      return;
    }

    docs.push({language, tests, solution, expected});
  });

  return docs;
}

function pushSolutions(q, solutions, logger) {
  let operations = solutions.map(payload => {
    logger.info('Pushing solution... ');
    delete payload.expected;

    return q.pushToQueue(payload).then(
      ref => logger.info('Solution pushed at %s', ref.toString())
    );
  });

  let failure = 0;

  // recover any rejected push operation and count the number of failure
  return Promise.all(
    operations.map(
      op => op.catch(err => console.error('Push failed: %s', err))
    )
  ).then(
    () => failure
  );
}

function testSolutions(dockerClient, solutions, imageTag, logger) {
  return solutions.reduce((chain, solution) => {
    const language = solution.language;
    const tests = solution.tests;
    const sol = solution.solution;
    const expected = solution.expected;

    return chain.then(() => {
      const s = {language, tests, solution: sol};

      logger.info('Running "%s"...', JSON.stringify(s, null, '  '));

      return verifier.verify(dockerClient, s, {logger, imageTag});
    }).then(
      result => assertEqual(result, expected)
    );
  }, Promise.resolve());
}

function assertEqual(actual, expected) {
  const diff = deepDiff(actual, expected) || [];
  const errors = diff.filter(
    diff => diff.kind !== 'E' || diff.rhs !== '<ANY>'
  ).length;
  const toJson = value => JSON.stringify(value, null, '  ');

  if (errors > 0) {
    throw new Error(`Was expecting "${toJson(expected)}"; got "${toJson(actual)}"`);
  }

  return actual;
}

function buildImage(image, tag, logger) {
  tag = tag || 'latest';

  return new Promise((resolve, reject) => {
    const options = {
      stdio: 'inherit',
      cwd: path.resolve(__dirname, '../')
    };
    const docker = childProcess.spawn(
      'docker',
      ['build', '-t', `${image.name}:${tag}`, image.path],
      options
    );

    logger.debug(
      'Building "%s" at "%s" from "%s"', image.name, image.path, options.cwd
    );

    docker.on('error', reject);
    docker.on('close', function (code) {
      if (code !== 0) {
        reject(code);
      } else {
        resolve();
      }
    });
  });
}

function pullImage(image, tag) {
  tag = tag || 'latest';

  return new Promise((resolve, reject) => {
    const options = {
      stdio: 'inherit',
      cwd: path.resolve(__dirname, '../')
    };
    const docker = childProcess.spawn(
      'docker',
      ['pull', `${image.name}:${tag}`],
      options
    );

    docker.on('error', reject);
    docker.on('close', function (code) {
      if (code !== 0) {
        reject(code);
      } else {
        resolve();
      }
    });
  });
}
